name: 배포

on:
  push:
    branches:
      - main

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 레포지토리 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 17

      - name: 프로필 교체
        run: |
          # 프로필 prod으로 교체
          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_PROD_YML }}" > ./src/main/resources/application-prod.yml

      - name: 프로젝트 빌드
        run: |
          # 컴포즈 up
          docker compose -f ./compose-virtual-machine.yml up -d
          
          # 빌드 전 헬스 체크
          until docker exec mysql-for-kiki-virtual-machine mysqladmin -u root -p"123456" ping -h "127.0.0.1" && \
                docker exec redis-for-kiki-virtual-machine redis-cli -a "123456" ping | grep -q "PONG"; do
            echo "Waiting for MySQL and Redis to be ready..."
            sleep 2
          done

      - name: 테스트 및 빌드
        run: ./gradlew clean build

      - name: 테스트 및 빌드 실패 시 관련 리포트 업로드
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: ./build/reports/tests/test

      - name: AWS 유저 인증
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_USER_SECRET_KEY }}

      - name: ECR에 로그인
        uses: aws-actions/amazon-ecr-login@v2

      - name: 서버 이미지 빌드, ECR에 푸시
        run: |
          REPO_URL=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
          
          # 프로젝트 빌드해서 나온 .jar 파일로 이미지 빌드
          docker build -t $REPO_URL/kiki-api-server:latest -f ./MyServerImageFile .
          
          # ECR에 푸시
          docker push $REPO_URL/kiki-api-server:latest

      - name: compose-prod.yml, redis-prod.conf 불러오기
        run: |
          echo "${{ secrets.COMPOSE_PROD_YML }}" > ./compose-prod.yml
          echo "${{ secrets.REDIS_PROD_CONF }}" > ./redis-prod.conf

      - name: compose.yml 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: ./compose-prod.yml
          target: /main/kiki/compose

      - name: redis.conf 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: ./redis-prod.conf
          target: /main/kiki/redis/config

      - name: 서버 접속
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script_stop: true
          script: |
            REPO_URL=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
            
            sudo su -
            
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $REPO_URL
            docker pull $REPO_URL/kiki-api-server:latest
            
            docker compose -f /main/kiki/compose/compose-prod.yml down
            
            while [ "$(docker ps -q)" ]; do
            sleep 2
            done

            docker compose -f /main/kiki/compose/compose-prod.yml up -d --build