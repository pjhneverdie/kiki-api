name: EC2 배포

on:
  push:
    branches:
      - main

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 레포지토리 체크아웃
        uses: actions/checkout@v4

      - name: 레포지토리에 application.yml 업로드
        run: |
          # 기존 application-local.yml 파일은 이제 필요 없으니 삭제
          rm /src/main/resources/application-local.yml
          
          # 원래 로컬에서 개발할 때는 local 프로필을 사용했었는데, 배포 환경이니 prod 프로필로 교체
          echo "${{ secrets.APPLICATION_YML }}" > /src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_PROD_YML }}" > /src/main/resources/application-prod.yml

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 17

      - name: 개발 환경이랑 똑같이 도커 세팅 (MySQL & Redis)
        run: |
          # 미리 설정한 가상 머신 전용 컴포즈 파일 up
          docker compose -f /compose-virtual-machine.yml up -d
          
          # 빌드 전 헬스 체크
          until docker exec mysql-for-kiki-virtual-machine mysqladmin -u root -p"123456" ping -h "127.0.0.1" && \
                docker exec redis-for-kiki-virtual-machine redis-cli -a "123456" ping | grep -q "PONG"; do
            echo "Waiting for MySQL and Redis to be ready..."
            sleep 2
          done

      - name: 테스트 및 빌드
        run: ./gradlew clean build

      - name: 테스트 및 빌드 실패 시 관련 리포트 업로드
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: build/reports/tests/test

      - name: AWS 유저 인증
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_USER_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: ECR에 로그인
        uses: aws-actions/amazon-ecr-login@v2

      - name: 서버 이미지 빌드, ECR에 푸시
        run: | 
          docker build -t kiki-api-server:latest .
          docker push kiki-api-server:latest
